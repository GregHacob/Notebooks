
Assuming that the two strings in question are of equal length, string 't' is an anagram of string 's', if string 't' have equal number of the same characters in string 's'. In order to decide whether two strings are anagrams, we will first count the number of times each character occurs in string 't' and string 's' and store it in 2 different lists. In the end, we compare the 2 lists and if the number of occurrences of each character in string 't' is equal than the same character in string 's’, then ‘t’ is an anagram of ‘s’. (isAnagram method). 
If the ‘t’ and ‘s’ are not the same length, then we will use findAnagram method to find out whether or not the substrings of ‘s’ with the length of string ‘t’ are anagram. We will start the substring search from index 0 with the length of string ‘t’ and use isAnagram method to evaluate. We will move the substring index by 1 and evaluate until we reach the last substring of the ‘s’ with the length of ‘t’
In isAnagram, the first two iterations used to count the characters are both based on n. The third iteration, comparing the two lists of counts, always takes 26 steps since there are 26 possible characters in the strings. Adding it all up gives us 2n+26 steps. That is O(n) and a linear order of magnitude algorithm for solving this problem if string ‘s’ and ‘t’ are the same length. If they are not the same length, we will have a nested loop that goes through each substring of ‘s’ and uses IsAnagram to evaluate. Thus, the O(n^2) is the algorithm efficiency.


